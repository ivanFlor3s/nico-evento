// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define your database schema here
model Product {
  id        String   @id @default(uuid())
  name      String
  category  String // "comida" | "bebida" | "entrada"
  price     Float
  available Boolean  @default(true)
  createdAt DateTime @default(now())

  comboItems ComboItem[]
  orderItems OrderItem[]
}

model LandingOffer {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  icon        String
  createdAt   DateTime @default(now())
  comboId     String   @unique
  combo       Combo    @relation(name: "LandingOfferToCombo", fields: [comboId], references: [id], onDelete: Cascade)
}

model Combo {
  id        String   @id @default(uuid())
  name      String
  price     Float
  available Boolean  @default(true)
  createdAt DateTime @default(now())

  comboItems   ComboItem[]
  orderItems   OrderItem[]
  landingOffer LandingOffer? @relation(name: "LandingOfferToCombo")
}

model ComboItem {
  id        String @id @default(uuid())
  comboId   String
  productId String
  quantity  Int

  combo   Combo   @relation(fields: [comboId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id            String   @id @default(uuid())
  buyerEmail    String
  buyerName     String
  buyerLastName String
  payMethod     String // "mercadopago" | "cash"
  total         Float
  status        String   @default("pending") // pending | paid | cancelled
  paymentId     BigInt?  @unique // ID del pago en MercadoPago
  preferenceId  String?  @unique // ID de la preferencia de MercadoPago
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  orderItems OrderItem[]
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String? // si es producto directo
  comboId   String? // si es combo
  quantity  Int
  price     Float // unitario
  subtotal  Float

  order   Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id])
  combo   Combo?   @relation(fields: [comboId], references: [id])
}
